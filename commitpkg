#!/bin/bash

DIR=$(readlink -e "$PWD")

. "$(dirname $0)/config"
. "$(dirname $0)/db-functions"

# Source makepkg.conf; fail if it is not found
if [[ -r '/etc/makepkg.conf' ]]; then
	source '/etc/makepkg.conf'
else
	die '/etc/makepkg.conf not found!'
fi

# Source user-specific makepkg.conf overrides
if [[ -r ~/.makepkg.conf ]]; then
	. ~/.makepkg.conf
fi

cmd=${0##*/}

if [[ ! -f $DIR/PKGBUILD ]]; then
	die 'No PKGBUILD file'
fi

. $DIR/PKGBUILD
pkgbase=${pkgbase:-$pkgname}

case "$cmd" in
	commitpkg)
		if (( $# == 0 )); then
			die 'Usage: commitpkg <reponame> [-s server] [-l limit] [-a arch] [commit message]'
		fi
		repo="$1"
		shift
		;;
	*pkg)
		repo="${cmd%pkg}"
		;;
	*)
		die 'Usage: commitpkg <reponame> [-s server] [-l limit] [-a arch] [commit message]'
		;;
esac

# find files which should be under source control
needsversioning=()
for s in "${source[@]}"; do
	[[ $s != *://* ]] && needsversioning+=("$DIR/$s")
done
for i in 'changelog' 'install'; do
	while read -r file; do
		# evaluate any bash variables used
		eval file=\"$(sed 's/^\(['\''"]\)\(.*\)\1$/\2/' <<< "$file")\"
		needsversioning+=("$file")
	done < <(sed -n "s/^[[:space:]]*$i=//p" $DIR/PKGBUILD)
done

# assert that they really are controlled by SVN
if (( ${#needsversioning[*]} )); then
	# svn status's output is only two columns when the status is unknown
	while read -r status filename; do
		[[ $status = '?' ]] && unversioned+=("$filename")
	done < <(svn status -v "${needsversioning[@]}")
	(( ${#unversioned[*]} )) && die "%s is not under version control" "${unversioned[@]##*/}"
fi

rsyncopts=(-e ssh -p --chmod=ug=rw,o=r -c -h -L --progress --partial -y)
while getopts 'l:a:s:' flag; do
	case $flag in
		s) server=$OPTARG ;;
		l) rsyncopts+=("--bwlimit=$OPTARG") ;;
		a) commit_arch=$OPTARG ;;
		:) die "Option requires an argument -- '%s'" "$OPTARG" ;;
		\?) die "Invalid option -- '%s'" "$OPTARG" ;;
	esac
done
if (( OPTIND > 1 )); then
	shift $(( OPTIND - 2 ))
else
	shift $(( OPTIND - 1 ))
fi

declare -a commitpkgs=()

# ugly workaround to tell a commit message from a package list
if [[ $1 = '--' ]]; then
	commitpkgs=(${@:2})
else
	(( OPTIND > 1 )) && shift
	commitmsg=$1

	if [[ $2 = '--' ]]; then
		commitpkgs=(${@:3})
	fi
fi

# check packages have the packager field set
for _arch in ${arch[@]}; do
	if [[ -n $commit_arch && ${_arch} != "$commit_arch" ]]; then
		continue
	fi
	for _pkgname in ${pkgname[@]}; do
		fullver=$(get_full_version $_pkgname)

		if pkgfile=$(find_cached_package "$_pkgname" "$_arch" "$fullver" "$DIR"); then
			if ! check_packager "$pkgfile"; then
				die "PACKAGER was not set when building package"
			fi
		fi
	done
done

if [[ -z $server ]]; then
	server='nymeria.archlinux.org'
fi

if [[ -n $(svn status -q $DIR) ]]; then
	msgtemplate="upgpkg: $pkgbase $(get_full_version)"$'\n\n'
	if [[ -n $commitmsg ]]; then
		stat_busy 'Committing changes to trunk'
		svn commit -q -m "${msgtemplate}${commitmsg}" $DIR || die "Commit failed"
		stat_done
	else
		msgfile="$(mktemp)"
		echo "$msgtemplate" > "$msgfile"
		if [[ -n $SVN_EDITOR ]]; then
			$SVN_EDITOR "$msgfile"
		elif [[ -n $VISUAL ]]; then
			$VISUAL "$msgfile"
		elif [[ -n $EDITOR ]]; then
			$EDITOR "$msgfile"
		else
			vi "$msgfile"
		fi
		[[ -s $msgfile ]] || die "Commit message empty"
		stat_busy 'Committing changes to trunk'
		svn commit -q -F "$msgfile" $DIR || die "Commit failed"
		unlink "$msgfile"
		stat_done
	fi
fi

declare -a uploads
declare -a uploads_debug
declare -a commit_arches
declare -a skip_arches

print_pkg() {
	local pkgname=$1 fullver=$2 pkgarch=$3 search_dir=$4
	local pkgfile sigfile
	pkgfile=$(find_cached_package "$pkgname" "$fullver" "$pkgarch" "$search_dir") || return 1

	# skip packages not in list
	if [[ ${#commitpkgs[@]} -gt 0 ]] && \
		! in_array ${pkgfile##*/} "${commitpkgs[@]}" && \
		! in_array $pkgname "${commitpkgs[@]}"; then
		return 0
	fi

	sigfile="${pkgfile}.sig"
	if [[ ! -f $sigfile ]]; then
		local SIGNWITHKEY
		if [[ -n $GPGKEY ]]; then
			SIGNWITHKEY="-u ${GPGKEY}"
		fi
		gpg --detach-sign --use-agent --no-armor ${SIGNWITHKEY} "${pkgfile}" || die
	fi
	if ! gpg --verify "$sigfile" >/dev/null 2>&1; then
		die "Signature %s.sig is incorrect!" "$pkgfile"
	fi

	echo "$pkgfile" "$sigfile"
}

for _arch in ${arch[@]}; do
	if [[ -n $commit_arch && ${_arch} != "$commit_arch" ]]; then
		skip_arches+=($_arch)
		continue
	fi

	for _pkgname in ${pkgname[@]}; do
		fullver=$(get_full_version $_pkgname)
		if [[ $(get_arch $_pkgname) = any ]]; then
			pkgarch=any
		else
			pkgarch=$_arch
		fi

		ret=()
		if ! ret=($(print_pkg $_pkgname $fullver $pkgarch $DIR)); then
			warning "Skipping $_pkgname-$fullver-$_arch: failed to locate package file"
			skip_arches+=($_arch)
			continue 2
		fi
		uploads+=(${ret[@]})
		uploads_debug+=($(print_pkg $_pkgname-$DEBUGSUFFIX $fullver $pkgarch $DIR))
	done
done

[[ ${arch[0]} = any ]] && arch=(${ARCHES[@]})
for _arch in ${arch[@]}; do
	if ! in_array $_arch ${skip_arches[@]}; then
		commit_arches+=($_arch)
	fi
done

if [[ ${#commit_arches[*]} -gt 0 ]]; then
	(cd $DIR; $(dirname $0)/archrelease)
fi

upload_files() {
	local repo=$1
	local -a files=("${@:2}")


	if [[ ${#files[*]} -gt 0 ]]; then
		local -a new_files=()

		# convert to absolute paths so rsync can work with colons (epoch)
		while read -r -d '' file; do
			new_files+=("$file")
		done < <(realpath -z "${files[@]}")

		files=($(dedup_array "${new_files[@]}"))
		rsync "${rsyncopts[@]}" "${files[@]}" "$server:staging/$repo/" || die

		for _file in "${files[@]}"; do
			pkgfile=${_file##*/}

			if [[ $pkgfile = *.pkg.tar?(.?z) ]]; then
				_arches=($(getpkgarch "$_file"))
				[[ ${_arches[0]} = any ]] && _arches=(${commit_arches[@]})
				for _arch in "${_arches[@]}"; do
					ssh "$server" ln -sr "staging/$repo/$pkgfile" "staging/$repo/$_arch/$pkgfile"
				done
			fi
		done
	fi
}

if [[ ${#uploads[@]} -gt 0 ]]; then
	msg 'Uploading all package and signature files'
	upload_files $repo "${uploads[@]}"
	upload_files $repo-$DEBUGSUFFIX "${uploads_debug[@]}"
fi
