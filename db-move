#!/bin/bash

. "$(dirname $0)/config"
. "$(dirname $0)/db-functions"

if [ $# -lt 3 ]; then
	msg "usage: ${0##*/} <repo-from> <repo-to> <arch> <pkgname> ..."
	exit 1
fi

args=(${@})
repo_from="${args[0]}"
repo_to="${args[1]}"
arch="${args[2]}"
pkgnames=("${args[@]:3}")

if ! check_repo_permission $repo_to || ! check_repo_permission $repo_from; then
	die "You don't have permission to move packages from ${repo_from} to ${repo_to}"
fi

if ! in_array "$arch" "${ARCHES[@]}" "all"; then
	die "Invalid arch '$arch'"
fi

if [[ $arch == "all" ]]; then
	arches=(${ARCHES[@]})
else
	arches=($arch)
fi

for pkgarch in ${arches[@]}; do
	repo_lock ${repo_to} ${pkgarch} || exit 1
	repo_lock ${repo_from} ${pkgarch} || exit 1
	repo_lock ${repo_to}-${DEBUGSUFFIX} ${pkgarch} || exit 1
	repo_lock ${repo_from}-${DEBUGSUFFIX} ${pkgarch} || exit 1
done

msg "Moving packages from [${repo_from}] to [${repo_to}]..."

declare -a pkgs_to_remove
for arch in ${arches[@]}; do
	for pkgname in "${pkgnames[@]}"; do
		msg2 "$arch\t$pkgname"

		for pkg in $(find_removed_split_packages "${repo_from}" "${repo_to}" "${arch}" "${pkgname}"); do
			pkgentry=$(pkgentry_from_db "${repo_to}" "${arch}" "${pkg}")
			pkgarch=$(getpkgarch $(getpkgfile "${FTP_BASE}/${repo_to}/os/${arch}/${pkgentry}"*${PKGEXT}))
			if [[ ${pkgarch} == any ]]; then
				msg2 "any\t${pkg}\t[removal]"
				for _arch in ${ARCHES[@]}; do
					pkgs_to_remove+=(${pkg}/${_arch})
				done
			else
				msg2 "${arch}\t${pkg}\t[removal]"
				pkgs_to_remove+=(${pkg}/${pkgarch})
			fi
		done

		arch_db_move "${repo_from}" "${repo_to}" "${arch}" "${pkgname}"

		if [[ -f "${HISTORYREPO}/${repo_from}-${DEBUGSUFFIX}/${arch}/${pkgname}-${DEBUGSUFFIX}" ]]; then
			arch_db_move "${repo_from}-${DEBUGSUFFIX}" "${repo_to}-${DEBUGSUFFIX}" \
				"${arch}" "${pkgname}-${DEBUGSUFFIX}"
		fi

	done
done

# TODO: assumes all packages are in the same repo, might not be the case
if [[ ${#pkgs_to_remove[@]} > 0 ]]; then
	pkgs_to_remove=($(dedup_array ${pkgs_to_remove[@]}))

	for pkgname in ${pkgs_to_remove[@]}; do
		pkgarch=${pkgname#*/}
		pkgname=${pkgname%/*}

		arch_db_remove "${repo_to}" "${pkgarch}" "${pkgname}"

		if [[ -f "${HISTORYREPO}/${repo_to}-${DEBUGSUFFIX}/${arch}/${pkgname}-${DEBUGSUFFIX}" ]]; then
			arch_db_remove "${repo_to}-${DEBUGSUFFIX}" "${pkgarch}" "${pkgname}-${DEBUGSUFFIX}"
		fi
	done
fi

arch_history_commit "db-move: $repo_from -> $repo_to: ${pkgnames[*]}"

for pkgarch in ${arches[@]}; do
	repo_unlock ${repo_from} ${pkgarch}
	repo_unlock ${repo_to} ${pkgarch}
	repo_unlock ${repo_from}-${DEBUGSUFFIX} ${pkgarch}
	repo_unlock ${repo_to}-${DEBUGSUFFIX} ${pkgarch}
done
