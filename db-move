#!/bin/bash

. "$(dirname $0)/config"
. "$(dirname $0)/db-functions"

if [ $# -lt 3 ]; then
	msg "usage: ${0##*/} <repo-from> <repo-to> <arch> <pkgname> ..."
	exit 1
fi

args=(${@})
repo_from="${args[0]}"
repo_to="${args[1]}"
arch="${args[2]}"
pkgnames=("${args[@]:3}")
ftppath_from="${FTP_BASE}/${repo_from}/os"
ftppath_to="${FTP_BASE}/${repo_to}/os"

if ! check_repo_permission $repo_to || ! check_repo_permission $repo_from; then
	die "You don't have permission to move packages from ${repo_from} to ${repo_to}"
fi

if ! in_array "$arch" "${ARCHES[@]}" "all"; then
	die "Invalid arch '$arch'"
fi

if [[ $arch == "all" ]]; then
	arches=(${ARCHES[@]})
else
	arches=($arch)
fi

for pkgarch in ${arches[@]}; do
	repo_lock ${repo_to} ${pkgarch} || exit 1
	repo_lock ${repo_from} ${pkgarch} || exit 1
done

msg "Moving packages from [${repo_from}] to [${repo_to}]..."

declare -a pkgs_to_remove
for arch in ${arches[@]}; do
	for pkgname in "${pkgnames[@]}"; do
		msg2 "$arch\t$pkgname"

		pkgver_from=$(pkgver_from_db "${repo_from}" "${arch}" "${pkgname}")
		pkgver_to=$(pkgver_from_db "${repo_to}" "${arch}" "${pkgname}")

		pkg=$(echo "$ftppath_from/${arch}/$pkgname-$pkgver_from"*${PKGEXT})

		if [ ! -f "${pkg}" ]; then
			die "Package ${pkgname} not found in repo"
		fi

		pkgbase=$(getpkgbase "${pkg}")
		pkgarch=$(getpkgarch "${pkg}")

		arch_db_move "${repo_from}" "${repo_to}" "${arch}" "${pkgname}"

		# package isn't in target repo yet
		if [ -z "${pkgver_to}" ]; then
			continue
		fi

		get_pkgbuild ${repo_from} ${pkgbase} ${pkgver_from} || die "PKGBUILD not found for ${pkgbase}-${pkgver_from}"
		get_pkgbuild ${repo_to} ${pkgbase} ${pkgver_to} || die "PKGBUILD not found for ${pkgbase}-${pkgver_to}"

		pkgnames_from=($(. "${WORKDIR}/pkgbuilds/${repo_from}/${pkgbase}-${pkgver_from}"; echo ${pkgname[@]}))
		pkgnames_to=($(. "${WORKDIR}/pkgbuilds/${repo_to}/${pkgbase}-${pkgver_to}"; echo ${pkgname[@]}))

		# list pkgnames_from twice to make them non-unique
		for pkg in $(uniq_array ${pkgnames_from[@]} ${pkgnames_from[@]} ${pkgnames_to[@]}); do
			pkgarches=($(. "${WORKDIR}/pkgbuilds/${repo_to}/${pkgbase}-${pkgver_to}"; get_arch ${pkg}))
			if [[ ${pkgarches[0]} == "any" ]]; then
				msg2 "any\t${pkg}\t[removal]"
				for _arch in ${ARCHES[@]}; do
					pkgs_to_remove+=(${pkg}/${_arch})
				done
			else
				msg2 "${arch}\t${pkg}\t[removal]"
				pkgs_to_remove+=(${pkg}/${arch})
			fi
		done
	done
done

if [[ ${#pkgs_to_remove[@]} > 0 ]]; then
	pkgs_to_remove=($(dedup_array ${pkgs_to_remove[@]}))

	for pkgname in ${pkgs_to_remove[@]}; do
		pkgarch=${pkgname#*/}
		pkgname=${pkgname%/*}
		arch_db_remove "${repo_to}" "${pkgarch}" "${pkgname}"
	done
fi

arch_history_commit "db-move: $repo_from -> $repo_to: ${pkgnames[*]}"

for pkgarch in ${arches[@]}; do
	repo_unlock ${repo_from} ${pkgarch}
	repo_unlock ${repo_to} ${pkgarch}
done
