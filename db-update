#!/bin/bash

. "$(dirname $0)/config"
. "$(dirname $0)/db-functions"

if [ $# -ge 1 ]; then
	warning "Calling ${0##*/} with a specific repository is no longer supported"
	exit 1
fi

# Find repos with packages to release
staging_repos=($(find "${STAGING}" -mindepth 1 -type f -name "*${PKGEXT}" -printf '%h\n' | sort -u))
if [ $? -ge 1 ]; then
	die "Could not read ${STAGING}"
fi

repos=()
for staging_repo in ${staging_repos[@]##*/}; do
	if in_array ${staging_repo} ${PKGREPOS[@]}; then
		repos+=(${staging_repo})
	fi
done

locks=()
for repo in ${repos[@]}; do
	for pkgarch in ${ARCHES[@]}; do
		if [ -n "$(find "$STAGING/$repo" -maxdepth 1 \( -name "*${pkgarch}${PKGEXT}" -o \
				-name "*any${PKGEXT}" \) -a -type f -print -quit)" ]; then
			repo_lock ${repo} ${pkgarch} || exit 1
			locks+=($repo/$pkgarch)
		fi
	done
done

# check if packages are valid
for repo in ${repos[@]}; do
	if ! check_repo_permission "${repo}"; then
		die "You don't have permission to update packages in ${repo}"
	fi
	pkgs=($(getpkgfiles "${STAGING}/${repo}/"*${PKGEXT}))
	if [ $? -eq 0 ]; then
		for pkg in ${pkgs[@]}; do
			if [ -h "${pkg}" ]; then
				die "Package ${repo}/${pkg##*/} is a symbolic link"
			fi
			if ! check_pkgfile "${pkg}"; then
				die "Package ${repo}/${pkg##*/} is not consistent with its meta data"
			fi
			if ${REQUIRE_SIGNATURE} && ! pacman-key -v "${pkg}.sig" >/dev/null 2>&1; then
				die "Package ${repo}/${pkg##*/} does not have a valid signature"
			fi
			if ! check_pkgrepos "${pkg}"; then
				die "Package ${repo}/${pkg##*/} already exists in another repository"
			fi
			if ! check_packager "${pkg}"; then
				die "Package ${repo}/${pkg##*/} does not have a valid packager"
			fi
			if ! check_buildinfo "${pkg}"; then
				die "Package ${repo}/${pkg##*/} does not have a .BUILDINFO file"
			fi
			if ! check_builddir "${pkg}"; then
				die "Package ${repo}/${pkg##*/} was not built in a chroot"
			fi
		done
	else
		die "Could not read ${STAGING}"
	fi
done

msg "Updating all packages in ${STAGING}"

declare -A pkgs_to_push
declare -A pkgs_should_push
declare -A pkgs_to_remove
for repo in ${repos[@]}; do
	for pkgfile in $(getpkgfiles "${STAGING}/${repo}/"*${PKGEXT} 2>/dev/null); do
		_pkgname=$(getpkgname "$pkgfile")
		_pkgbase=$(getpkgbase "$pkgfile")
		_pkgver=$(getpkgver "$pkgfile")
		_pkgarch=$(getpkgarch "$pkgfile")

		get_pkgbuild $repo $_pkgbase $_pkgarch $_pkgver || die "PKGBUILD not found for $_pkgbase-$_pkgver"

		_pkgnames=($(. "$WORKDIR/pkgbuilds/$repo-$_pkgarch/$_pkgbase-$_pkgver"; echo ${pkgname[@]}))
		_pkgentry=($(arch_history_fetch $repo $_pkgname $_pkgarch))
		if [ "${#_pkgentry[@]}" -eq 2 ]; then
			_db_ver=${_pkgentry[1]}

			get_pkgbuild $repo $_pkgbase $_pkgarch $_pkgver || die "PKGBUILD not found for $_pkgbase-$_db_ver"

			_db_names=($(. "${WORKDIR}/pkgbuilds/${repo}-${_pkgarch}/${_pkgbase}-${_db_ver}"; echo ${pkgname[@]}))

			# duplicate ${_pkgnames[@]} to make uniq_array only return entries only found in ${_db_names[@]}
			for _pkg in $(uniq_array ${_pkgnames[@]} ${_pkgnames[@]} ${_db_names[@]}); do
				_rarchs=($(. "${WORKDIR}/pkgbuilds/${repo}-${_pkgarch}/${_pkgbase}-${_db_ver}"; get_arch))
				for _rarch in ${_rarchs[@]}; do
					pkgs_to_remove[$_pkg-$_rarch]=''
				done
			done
		fi

		for _pkg in ${_pkgnames[@]}; do
			pkgs_should_push[$_pkg]=$_pkgver
		done

		pkgs_to_push[$_pkgname]=$_pkgver
		arch_add_to_pool "$pkgfile"
	done

	for file in "$STAGING/$repo"/*/*; do
		if [[ -h $file ]]; then
			pkgfiles=("${pkgfiles[@]}" "${file##*/}")
		fi
	done

	for pkgarch in ${ARCHES[@]}; do
		declare -a pkgs_to_add=()
		for pkgfile in "${pkgfiles[@]}"; do
			pkgfile_arch="$STAGING/$repo/$pkgarch/$pkgfile"
			if [[ -h "$pkgfile_arch" ]]; then
				pkgs_to_add=("${pkgs_to_add[@]}" "$pkgfile")
				rm "$pkgfile_arch"
			fi
		done

		if [[ ${#pkgs_to_add[@]} = 0 ]]; then
			continue
		fi

		for pkg in $(uniq_array ${!pkgs_to_push[@]} ${!pkgs_to_push[@]} ${!pkgs_should_push[@]}); do
			pkgentry=($(arch_history_fetch $repo $pkg $pkgarch))
			# check if already released first
			if [ ${#pkgentry[@]} -ne 2 ] || [ ${pkgentry[1]} -ne ${pkgs_should_push[$pkg]} ]; then
				warning "Missing split package $pkg-$pkgarch. Did you forget to commitpkg?"
			fi
		done

		arch_db_add $repo "$pkgarch" "${pkgs_to_add[@]}"
	done
done

if [ ${#pkgs_to_remove[@]} -gt 0 ]; then
	msg "Cleaning from db removed split packages:"
	for rem in ${!pkgs_to_remove[@]}; do
		pkg=${rem%-*}
		arch=${rem##*-}
		msg2 "$arch\t$pkg"
		arch_db_remove $repo $arch $pkg
	done
fi

arch_history_commit "db-update: ${repos[*]}"

for lock in ${locks[@]}; do
	repo=${lock%/*}
	pkgarch=${lock#*/}
	repo_unlock ${repo} ${pkgarch}
done
